Sys.setenv(SPOTIFY_CLIENT_ID = '857bab10601a4bc2af19d359336d3af7')
Sys.setenv(SPOTIFY_CLIENT_SECRET = 'f36a14960bc445fba551b36f3b65cd65')
url <- "https://kworb.net/spotify/songs.html"
url1 <- "https://kworb.net/spotify/artists.html"
url2 <- "https://kworb.net/spotify/listeners.html"
#access_token <- get_spotify_access_token()
#all_artists_info <- search_spotify("all", type = "artist")
webpage <- read_html(url)
knitr::opts_chunk$set(warning=FALSE, message=FALSE)
#library(devtools)
#library('spotifyr')
library(rvest)
library(tidyverse)
#library(png)
library(grid)
library(gridExtra)
library(car)
library(knitr)
library(kableExtra)
library(formattable)
library(DT)
Sys.setenv(SPOTIFY_CLIENT_ID = '857bab10601a4bc2af19d359336d3af7')
Sys.setenv(SPOTIFY_CLIENT_SECRET = 'f36a14960bc445fba551b36f3b65cd65')
url <- "https://kworb.net/spotify/songs.html"
url1 <- "https://kworb.net/spotify/artists.html"
url2 <- "https://kworb.net/spotify/listeners.html"
#access_token <- get_spotify_access_token()
#all_artists_info <- search_spotify("all", type = "artist")
webpage <- read_html(url)
table <- html_table(webpage)[[1]]
webpage1 <- read_html(url1)
table1 <- html_table(webpage1)[[1]]
webpage2 <- read_html(url2)
table2 <- html_table(webpage2)[[1]]
df <- as.data.frame(table) |>
rename(title = `Artist and Title`) |>
separate(title, into = c("artist", "title"), sep = " - ") |>
rename(streams = Streams,
daily = Daily) |>
mutate(streams = as.numeric(gsub(",", "", streams)),
daily = as.numeric(gsub(",", "", daily))) |>
drop_na()
df1 <- as.data.frame(table1) |>
rename(artist_streams = Streams,
artist = Artist,
daily1 = Daily) |>
mutate(artist_streams = as.numeric(gsub(",", "", artist_streams))) |>
dplyr::select(artist, artist_streams, daily1) |>
drop_na()
df2 <- as.data.frame(table2) |>
rename(monthly_listeners = Listeners,
peak_monthly_listeners = PkListeners,
months_sincepk = Peak,
daily_average = `Daily Trend`,
artist = Artist) |>
mutate(monthly_listeners = as.numeric(gsub(",", "", monthly_listeners)),
peak_monthly_listeners = as.numeric(gsub(",", "", peak_monthly_listeners)),
daily_average = as.numeric(gsub(",", "", daily_average)))|>
dplyr::select(artist, monthly_listeners, peak_monthly_listeners, months_sincepk, daily_average) |>
drop_na()
dta <- read_csv("https://github.com/Tonadeleon/Regression-Projects/raw/main/Datasets/dataset.csv")|>
#filter(popularity > 20) |>
rename(title = track_name,
artist = artists,
title_id = track_id,
album = album_name,
loud = loudness,
words = speechiness,
acoustics = acousticness,
instrumental = instrumentalness,
live = liveness) |>
inner_join(df1, by="artist", relationship =
"many-to-many") |>
inner_join(df2, by="artist", relationship =
"many-to-many")
dt <- inner_join(dta, df, by = c("title", "artist"), relationship =
"many-to-many") |>
dplyr::select(-track_genre) |>
mutate(explicit = as.factor(explicit),
daily = daily,
#streams = ifelse(streams>3825666400, 942193161, streams),
#times = as.factor(time_signature),
#energy = ifelse(energy>.5,1,0),
#duration = ifelse(between(duration_ms, 200000, 250000), 1, 0),
#loud = ifelse(loud>-9, 1, 0),
dance = ifelse(danceability>.5,1,0),
words = ifelse(between(words, .025, .06), 1, 0),
instrumental = ifelse(instrumental>0,1,0),
#popularity = ifelse(popularity>76,1,0),
live = ifelse(live<.37,1,0),
key = case_when(key %in% c(0, 1, 6, 8, 11) ~ 1,TRUE ~ 0),
explicit = case_when(explicit == "TRUE" ~ 1,TRUE ~ 0),
#genre = case_when(genre %in% c("pop", "chill", "indie", "garage", "ambient", "folk", "indie-pop", "power-pop", "reggae", "soul", "synth-pop", "swedish", "country", "metal", "german", "funk", "alternative", "alt-rock") ~ 1,TRUE ~ 0),
peak_last_year = ifelse(months_sincepk<13,1,0),
y = ifelse(popularity >79 ,1 ,0),
popularity0 = round(popularity / 5) * 5,
popularity0 = case_when( popularity0 > 84 ~ 1, popularity == 80 ~ 2, TRUE ~ 3 ),
popularity1 = round(popularity / 10) * 10,
popularity1 = case_when( popularity1 == 0 ~ 1, popularity1 == 70 ~ 2, popularity1 == 80 ~ 3,  popularity1 == 90 ~ 4, TRUE ~ 5 ),
times = case_when(time_signature %in% c(4) ~ 1,TRUE ~ 0),
energy = round(energy*10),
popular_artist = case_when(artist_streams > 75000 ~ 1, between(artist_streams, 50000,75000) ~ 2, between(artist_streams, 25000,50000) ~ 3, artist_streams < 25000 ~ 4, TRUE ~ 0 ),
diff = peak_monthly_listeners - monthly_listeners,
current_hit = ifelse(diff>20000000,1,0),
current_trend = ifelse(daily_average<0,0,1)) |>
distinct(across(c(daily1, monthly_listeners, artist_streams, streams, months_sincepk, explicit, daily, popular_artist))) |>
dplyr::select(daily, daily1, monthly_listeners, artist_streams, streams, months_sincepk, explicit,  popular_artist)
dt$daily1 <- log(dt$daily1)
dt$monthly_listeners <- log(dt$monthly_listeners)
dt$artist_streams <- log(dt$artist_streams)
dt$streams <- log(dt$streams)
dt$daily <- log(dt$daily)
mylm <- lm((daily1) ~
explicit +
###
(monthly_listeners) +
(artist_streams) +
(streams)
, dt)
b <-(coef(mylm))
#summary(mylm)
set.seed(17)
num_rows <- 440 #882 total
keep <- sample(1:nrow(dt), num_rows)
mytrain <- dt[keep, ]
mylm <- lm((daily1) ~
explicit +
###
(monthly_listeners) +
(artist_streams) +
(streams)
, mytrain)
mytest <- dt[-keep, ] #Use this in the predict(..., newdata=mytest)
yhcc <- predict(mylm, newdata=mytest)
ybarcc <- mean(mytest$daily1)
SSTOcc <- sum( (mytest$daily1 - ybarcc)^2 )
SSEcc <- sum( (mytest$daily1 - yhcc)^2 )
rscc <- 1 - SSEcc/SSTOcc
n <- length(mytest$daily1) #sample size
pcc  <- length(coef(mylm)) #num. parameters in model
rscca <- 1 - (n-1)/(n-pcc)*SSEcc/SSTOcc
my_output_table2 <- data.frame(
Model = c(
"Alternative Model"),
`Original R2` = c(
summary(mylm)$r.squared),
#summary(bsalm)$r.squared),
`Orig. Adj. R-squared` = c(
summary(mylm)$adj.r.squared),
#summary(bsalm)$adj.r.squared,
`Validation R-squared` = c(
rscc),
`Validation Adj. R^2` = c(
rscca))
colnames(my_output_table2) <- c(
"Model", "Original $R^2$",
"Original Adj. $R^2$",
"Validation $R^2$",
"Validation Adj. $R^2$")
knitr::kable(my_output_table2, escape=TRUE, digits=5)
set.seed(18)
num_rows <- 440 #882 total
keep <- sample(1:nrow(dt), num_rows)
mytrain <- dt[keep, ]
mylm <- lm((daily1) ~
explicit +
###
(monthly_listeners) +
(artist_streams) +
(streams)
, mytrain)
mytest <- dt[-keep, ] #Use this in the predict(..., newdata=mytest)
yhcc <- predict(mylm, newdata=mytest)
ybarcc <- mean(mytest$daily1)
SSTOcc <- sum( (mytest$daily1 - ybarcc)^2 )
SSEcc <- sum( (mytest$daily1 - yhcc)^2 )
rscc <- 1 - SSEcc/SSTOcc
n <- length(mytest$daily1) #sample size
pcc  <- length(coef(mylm)) #num. parameters in model
rscca <- 1 - (n-1)/(n-pcc)*SSEcc/SSTOcc
my_output_table2 <- data.frame(
Model = c(
"Alternative Model"),
`Original R2` = c(
summary(mylm)$r.squared),
#summary(bsalm)$r.squared),
`Orig. Adj. R-squared` = c(
summary(mylm)$adj.r.squared),
#summary(bsalm)$adj.r.squared,
`Validation R-squared` = c(
rscc),
`Validation Adj. R^2` = c(
rscca))
colnames(my_output_table2) <- c(
"Model", "Original $R^2$",
"Original Adj. $R^2$",
"Validation $R^2$",
"Validation Adj. $R^2$")
knitr::kable(my_output_table2, escape=TRUE, digits=5)
set.seed(19)
num_rows <- 440 #882 total
keep <- sample(1:nrow(dt), num_rows)
mytrain <- dt[keep, ]
mylm <- lm((daily1) ~
explicit +
###
(monthly_listeners) +
(artist_streams) +
(streams)
, mytrain)
mytest <- dt[-keep, ] #Use this in the predict(..., newdata=mytest)
yhcc <- predict(mylm, newdata=mytest)
ybarcc <- mean(mytest$daily1)
SSTOcc <- sum( (mytest$daily1 - ybarcc)^2 )
SSEcc <- sum( (mytest$daily1 - yhcc)^2 )
rscc <- 1 - SSEcc/SSTOcc
n <- length(mytest$daily1) #sample size
pcc  <- length(coef(mylm)) #num. parameters in model
rscca <- 1 - (n-1)/(n-pcc)*SSEcc/SSTOcc
my_output_table2 <- data.frame(
Model = c(
"Alternative Model"),
`Original R2` = c(
summary(mylm)$r.squared),
#summary(bsalm)$r.squared),
`Orig. Adj. R-squared` = c(
summary(mylm)$adj.r.squared),
#summary(bsalm)$adj.r.squared,
`Validation R-squared` = c(
rscc),
`Validation Adj. R^2` = c(
rscca))
colnames(my_output_table2) <- c(
"Model", "Original $R^2$",
"Original Adj. $R^2$",
"Validation $R^2$",
"Validation Adj. $R^2$")
knitr::kable(my_output_table2, escape=TRUE, digits=5)
set.seed(20)
num_rows <- 440 #882 total
keep <- sample(1:nrow(dt), num_rows)
mytrain <- dt[keep, ]
mylm <- lm((daily1) ~
explicit +
###
(monthly_listeners) +
(artist_streams) +
(streams)
, mytrain)
mytest <- dt[-keep, ] #Use this in the predict(..., newdata=mytest)
yhcc <- predict(mylm, newdata=mytest)
ybarcc <- mean(mytest$daily1)
SSTOcc <- sum( (mytest$daily1 - ybarcc)^2 )
SSEcc <- sum( (mytest$daily1 - yhcc)^2 )
rscc <- 1 - SSEcc/SSTOcc
n <- length(mytest$daily1) #sample size
pcc  <- length(coef(mylm)) #num. parameters in model
rscca <- 1 - (n-1)/(n-pcc)*SSEcc/SSTOcc
my_output_table2 <- data.frame(
Model = c(
"Alternative Model"),
`Original R2` = c(
summary(mylm)$r.squared),
#summary(bsalm)$r.squared),
`Orig. Adj. R-squared` = c(
summary(mylm)$adj.r.squared),
#summary(bsalm)$adj.r.squared,
`Validation R-squared` = c(
rscc),
`Validation Adj. R^2` = c(
rscca))
colnames(my_output_table2) <- c(
"Model", "Original $R^2$",
"Original Adj. $R^2$",
"Validation $R^2$",
"Validation Adj. $R^2$")
knitr::kable(my_output_table2, escape=TRUE, digits=5)
set.seed(17)
num_rows <- 440 #882 total
keep <- sample(1:nrow(dt), num_rows)
mytrain <- dt[keep, ]
mylm <- lm((daily1) ~
explicit +
###
(monthly_listeners) +
(artist_streams) +
(streams)
, mytrain)
mytest <- dt[-keep, ] #Use this in the predict(..., newdata=mytest)
yhcc <- predict(mylm, newdata=mytest)
ybarcc <- mean(mytest$daily1)
SSTOcc <- sum( (mytest$daily1 - ybarcc)^2 )
SSEcc <- sum( (mytest$daily1 - yhcc)^2 )
rscc <- 1 - SSEcc/SSTOcc
n <- length(mytest$daily1) #sample size
pcc  <- length(coef(mylm)) #num. parameters in model
rscca <- 1 - (n-1)/(n-pcc)*SSEcc/SSTOcc
my_output_table2 <- data.frame(
Model = c(
"Alternative Model"),
`Original R2` = c(
summary(mylm)$r.squared),
#summary(bsalm)$r.squared),
`Orig. Adj. R-squared` = c(
summary(mylm)$adj.r.squared),
#summary(bsalm)$adj.r.squared,
`Validation R-squared` = c(
rscc),
`Validation Adj. R^2` = c(
rscca))
colnames(my_output_table2) <- c(
"Model", "Original $R^2$",
"Original Adj. $R^2$",
"Validation $R^2$",
"Validation Adj. $R^2$")
knitr::kable(my_output_table2, escape=TRUE, digits=5)
